<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAPebAAD3mwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAADqAAAA9gAAAIoAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAADJAAAA/AAAAMEAAAAjAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAuwAAAP8AAAD/AAAA4gAAACIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAP8AAAD/AAAA/wAA
        AGMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAADEAAAA/wAAAP8AAADoAAAAKAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB6AAAA/wAA
        AP8AAAD/AAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAABLAAAAZAAAANoAAAD/AAAA/wAA
        APAAAAB1AAAAWgAAAFwAAABcAAAAXAAAAFwAAABcAAAAXAAAAFwAAABcAAAAXAAAAFwAAABcAAAAWgAA
        AKoAAAD/AAAA/wAAAP8AAACiAAAAUwAAABYAAAAAAAAAAAAAAAAAAAAAAAAASgAAAPQAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAA
        AP4AAAD+AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAcAAAAAAAAAAAAAAAAAAAAAAAAABrAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD4AAAA+wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAPoAAAD5AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAB/AAAAAAAAAAAAAAAAAAAAAAAA
        AHgAAAD/AAAA/wAAAP8AAAD8AAAAogAAAEYAAABgAAAA1wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADLAAAAVgAAAEoAAACyAAAA/wAAAP8AAAD/AAAA/wAAAIEAAAAAAAAAAAAA
        AAAAAAAAAAAAhQAAAP8AAAD/AAAA/wAAAM4AAAAXAAAAAAAAAAAAAABcAAAA+wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA8wAAAEYAAAAAAAAAAAAAACYAAADeAAAA/wAAAP8AAAD/AAAAhAAA
        AAAAAAAAAAAAAAAAAAAAAACOAAAA/wAAAP8AAAD/AAAAuQAAAAcAAAAAAAAAAAAAAEAAAAD1AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADqAAAAKwAAAAAAAAAAAAAAEQAAAM4AAAD/AAAA/wAA
        AP8AAACGAAAAAAAAAAAAAAAAAAAAAAAAAJQAAAD/AAAA/wAAAP8AAADqAAAASwAAAAMAAAAQAAAAlwAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP0AAACBAAAACgAAAAUAAABeAAAA8wAA
        AP8AAAD/AAAA/wAAAIkAAAAAAAAAAAAAAAAAAAAAAAAAmwAAAP8AAAD/AAAA/wAAAP8AAADoAAAAsgAA
        AMYAAAD5AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPYAAAC/AAAAtgAA
        AO4AAAD/AAAA/wAAAP8AAAD/AAAAigAAAAAAAAAAAAAAAAAAAAAAAACdAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACLAAAAAAAAAAAAAAAAAAAAAAAAAJ8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIwAAAAAAAAAAAAAAAAAAAAAAAAAoAAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAjQAAAAAAAAAAAAAAAAAA
        AAAAAACgAAAA/wAAAP8AAAD+AAAA+wAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAA
        APoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAPsAAAD/AAAA/wAAAP8AAACMAAAAAAAA
        AAAAAAAAAAAAAAAAAJwAAAD/AAAA/wAAAOsAAABjAAAASwAAAEwAAABMAAAATAAAAEwAAABMAAAATAAA
        AEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABJAAAAgQAAAPwAAAD/AAAA/wAA
        AIkAAAAAAAAAAAAAAAAAAAAAAAAAmQAAAP8AAAD/AAAA4gAAACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABLAAAA+gAA
        AP8AAAD/AAAAhgAAAAAAAAAAAAAAAAAAAAIAAACeAAAA/wAAAP8AAADiAAAAIQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AEwAAAD6AAAA/wAAAP8AAACPAAAAAQAAAAAAAAAAAAAAUgAAAOwAAAD/AAAA/wAAAOIAAAAhAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAATAAAAPoAAAD/AAAA/wAAAOoAAABRAAAAAAAAAAAAAACaAAAA/wAAAP8AAAD/AAAA4gAA
        ACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABMAAAA+gAAAP8AAAD/AAAA/wAAAJoAAAAAAAAAAAAAAJ8AAAD/AAAA/wAA
        AP8AAADiAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAAD6AAAA/wAAAP8AAAD/AAAAnwAAAAAAAAAAAAAAnwAA
        AP8AAAD/AAAA/wAAAOIAAAAhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAPoAAAD/AAAA/wAAAP8AAACfAAAAAAAA
        AAAAAACaAAAA/wAAAP8AAAD/AAAA4gAAACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMAAAA+gAAAP8AAAD/AAAA/wAA
        AJoAAAAAAAAAAAAAAFQAAADoAAAA/wAAAP8AAADiAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAAD6AAAA/wAA
        AP8AAADnAAAAVAAAAAAAAAAAAAAAAQAAAFQAAAD2AAAA/wAAAOIAAAAhAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASwAA
        APoAAAD/AAAA8QAAAEwAAAABAAAAAAAAAAAAAAAAAAAAKAAAAOcAAAD/AAAA7gAAAHsAAABmAAAAaQAA
        AGsAAABrAAAAawAAAGsAAABrAAAAawAAAGsAAABrAAAAawAAAGsAAABrAAAAawAAAGsAAABrAAAAaAAA
        AGQAAACUAAAA/AAAAP8AAADeAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAUAAAA0gAAAP8AAAD/AAAA/wAA
        AP8AAADmAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAAAMYAAADGAAAAxgAA
        AMkAAADyAAAA/wAAAP8AAAD/AAAA/wAAAMYAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAUAAACxAAAA/wAA
        AP8AAAD/AAAA/wAAAJUAAAAIAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAA
        AAoAAAAJAAAAFQAAAMYAAAD/AAAA/wAAAP8AAAD/AAAAnAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AHoAAAD/AAAA/wAAAP8AAAD/AAAAmwAAABcAAAAZAAAAGQAAABkAAAAZAAAAGQAAABkAAAAZAAAAGQAA
        ABkAAAAZAAAAGQAAABgAAAAjAAAAyQAAAP8AAAD/AAAA/wAAAPsAAABbAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAKgAAANUAAAD/AAAA/wAAAP8AAADvAAAA2gAAANoAAADaAAAA2gAAANoAAADaAAAA2gAA
        ANoAAADaAAAA2gAAANoAAADaAAAA2gAAANwAAAD2AAAA/wAAAP8AAAD8AAAAqwAAABIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAALwAAAJgAAADbAAAA9wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPkAAADlAAAAtwAAAGUAAAASAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACMAAABVAAAAhQAAAK4AAADMAAAA4QAA
        AO8AAAD4AAAA/AAAAP4AAAD8AAAA9wAAAO0AAADfAAAAygAAAK4AAACHAAAAWwAAAC0AAAALAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+D/+D/A//g/wP/4PwAAAA8AAAAPAAAADwAAAA8DAAwPAwAMDwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8H//4OB//+Bgf//gYH//4GB//+Bgf//gYH//4GB//+Bgf//gcAA
        AAPAAAADwAAAA+AAAAfgAAAH8AAAD/gAAD8=
</value>
  </data>
</root>